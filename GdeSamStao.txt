
//--------------------------------------------------------------------------------------------------------------------------------------------------------

Lekcija - https://www.youtube.com/watch?v=CowsopJhX3M&list=PLB4AdipoHpxaHDLIaMdtro1eXnQtl_UvE&index=2
instaliram laravel 5.6 komandom 'composer create-project laravel/laravel larastart "5.6.*" ' zatim komanda 'npm install' zatim instaliramo paket adminlte-
-komandom 'npm install admin-lte@v3.0.0-alpha.2 --save'
pokrecemo aplikaciju komandom 'php artisan serve' i idemo na http://127.0.0.1:8000
u .env fajlu podesav amo bazu da se zove 'larastart'
komandom 'php artisan make:auth' pravimo autentifikaciju, i migriramo komandom 'php artisan migrate', da bi se sredio error koji vraca baza u fajlu -
-'app\Providers\AppServiceProvider.php' prvo uvozimo use Illuminate\Support\Facades\Schema; a u boot() metodu pisemo- Schema::defaultStringLength(191);
opet migriramo komandom 'php artisan migrate:fresh' da bi obrisao prethodni migrate, pravimo usera admin, admin@yahoo.com itd
pravim novi vju tj layout master.blade.php u 'resources\views\layouts' u taj fajl ubacujemo html sa stranice
- view-source:https://adminlte.io/themes/dev/AdminLTE/starter.html i prepravljamo ga malo, sada vju home.blade.php podesavamo da koristi master.blade.php-
-kao layout tj da ga extenduje
u fajlu 'resources\assets\js\bootstrap.js' dodajemo require('admin-lte'); a u fajlu 'resources\assets\sass\app.scss' dodajemo -
- @import '~admin-lte/dist/css/adminlte.css'; i onda pustamo u git-bashu 'npm run watch'

//--------------------------------------------------------------------------------------------------------------------------------------------------------

Lekcija - https://www.youtube.com/watch?v=cKhTwApvuyw&list=PLB4AdipoHpxaHDLIaMdtro1eXnQtl_UvE&index=3
instaliramo font awesome komanda 'npm install @fortawesome/fontawesome-free' i onda u 'resources\assets\sass\app.scss' dodajemo ovo -
$fa-font-path: "../webfonts";
//font-awesome
@import "~@fortawesome/fontawesome-free/scss/fontawesome.scss";
@import "~@fortawesome/fontawesome-free/scss/solid.scss";
@import "~@fortawesome/fontawesome-free/scss/brands.scss";
i onda je preradjivan master.blade.php layout

//--------------------------------------------------------------------------------------------------------------------------------------------------------

Lekcija - https://www.youtube.com/watch?v=G8vytBtPnjA&list=PLB4AdipoHpxaHDLIaMdtro1eXnQtl_UvE&index=4
pushovo na GitHub, prvo komanda 'git init' pa onda 'git add . ' pa onda 'git commit -m "first commit"', pravi se na GitHubu repo larastart1 i onda kopir-
-am komande 'git remote add origin https://github.com/vladasarac/larastart1.git' i onda 'git push -u origin master', sada imam novi repo na GitHubu -
- https://github.com/vladasarac/larastart1

//--------------------------------------------------------------------------------------------------------------------------------------------------------

Lekcija - https://www.youtube.com/watch?v=OcsKODgaOb8&list=PLB4AdipoHpxaHDLIaMdtro1eXnQtl_UvE&index=5
sredjivanje menija i div-ova u master.blade.php layout-u i push na GitHub

//--------------------------------------------------------------------------------------------------------------------------------------------------------

Lekcija - https://www.youtube.com/watch?v=Gx93Bz62AII&list=PLB4AdipoHpxaHDLIaMdtro1eXnQtl_UvE&index=6
komandom 'npm install vue-router' instaliramo vue router dokumentacija - https://router.vuejs.org
u 'resources\assets\js\app.js' pisemo
import VueRouter from 'vue-router'
Vue.use(VueRouter);
i onda importujemo nove komponente Dashboard.vue i Profile.vue
const routes = [
    { path: '/dashboard', component: require('./components/Dashboard.vue') },
    { path: '/profile', component: require('./components/Profile.vue') }
  ]
i onda ovo
const router = new VueRouter({
    routes // short for `routes: routes`
});
i dodajemo ovo na 33 liniju router -
const app = new Vue({
    el: '#app',
    router
});
u folderu 'resources\assets\js\components' pravimo jos 2 vue komponenet Dashboard.vue i Profile.vue i kopiramo iu njih sadrzaj ExampleComponente.vue -
- moze se uraditi sa ctrl+shift+s na ExampleComponente.vue i samo se promeni ime
Dodajemo u layout master.blade.php u head csrf token <meta name="csrf-token" content="{{ csrf_token() }}"> i divu klase wrapper (odmah ispod body taga)-
- dodajemo id #app posto se au app.js vue komponenta kaci na taj element (id="app")
sad pravimo linkove ka komponentama i u master.blade.php menjamo link <a href="#" class="nav-link"> u <router-link to="/dashboard" class="nav-link"> -
-i takodje link ka Profile stranici u <router-link to="/profile" class="nav-link">
dodajemo <router-view></router-view> u div <div class="container-fluid"> tj tu cemo prikazivati vue komponente
sada kad kliknemo link Profile prikazuje u <div class="container-fluid"> Profile.vue komponentu isto i za Dashboard.vue komponentu i link

//--------------------------------------------------------------------------------------------------------------------------------------------------------

Lekcija - https://www.youtube.com/watch?v=z6yH6iB76nc&list=PLB4AdipoHpxaHDLIaMdtro1eXnQtl_UvE&index=7
Posto je url kad se kliknu linkovi Profile i Dashboard u levom meniju bio http://127.0.0.1:8000/home#/Dashboard ili http://127.0.0.1:8000/home#/Profile
da bi to promenili u 'resources\assets\js\app.js' dodajemo mode: 'history', u const router = new VueRouter({ i sada su linkovi normalni tj -
-http://127.0.0.1:8000/dashboard i http://127.0.0.1:8000/profile
takodje u web.php iz routes foldera dodajemo Route::get('{path}', "HomeController@index")->where( 'path', '([A-z\d-\/_.]+)?'); i sada je moguce refresh-
-ovati stranice /dashboard i /profile
Sada da bi aktivan link imao drugaciju boju od drugih u levoj navigaciji a kada se klikne sam vue mu dodaje klasu .router-link-exact-active u app.scss - 
- iz foldera 'resources\assets\sass' dodajemo
.router-link-exact-active{
  background-color: #3f51b5;
  color: #fff !important;
}
i sada ce aktivan link koji kliknemo imati drugaciju boju i background

//--------------------------------------------------------------------------------------------------------------------------------------------------------

Lekcija - https://www.youtube.com/watch?v=6dR2sUZ596w&list=PLB4AdipoHpxaHDLIaMdtro1eXnQtl_UvE&index=8
Logout
iz app.blade.php layouta kopiramo link i formu koju on poziva za logout (forma ide na rutu /logout) i ubacujemo to u master.blade.php layout i sada kad -
-se u levoj navigaciji klikne lin Logout vrsi se logout
dodali smo u _variables.scss iz foldera 'resources\assets\sass' klase za osnovne boje i sada mozemo dodati u vjuovima te klase elementima

//--------------------------------------------------------------------------------------------------------------------------------------------------------

Lekcija - https://www.youtube.com/watch?v=zP0uPDuoDHE&list=PLB4AdipoHpxaHDLIaMdtro1eXnQtl_UvE&index=9
U folderu 'resources\assets\js\components' pravimo novu komponent Users.vue i registrujemo je u app.js iz foldera 'resources\assets\js'-
-{ path: '/users', component: require('./components/Users.vue') }, a u master.blade.php pravimo link <router-link to="/users" class="nav-link"> i sada -
-kad u levom meniju kliknemo link users ucitava se komponenta Users.vue

//--------------------------------------------------------------------------------------------------------------------------------------------------------

Lekcija - https://www.youtube.com/watch?v=KskOZqvIZow&list=PLB4AdipoHpxaHDLIaMdtro1eXnQtl_UvE&index=10
Dodacemo u Profile.vue komponentu tabelu koja prikazuje sve usere, uzimamo html sa https://adminlte.io/themes/dev/AdminLTE/pages/tables/simple.html
i onda smo sredjivali tu tabelu da izgleda kako treba, dodat je modal window za prikaz forme za dodavanje novog usera itd

//--------------------------------------------------------------------------------------------------------------------------------------------------------

Lekcija - https://www.youtube.com/watch?v=ezUVsuGNUnU&list=PLB4AdipoHpxaHDLIaMdtro1eXnQtl_UvE&index=11
instaliracemo paket sa GitHuba za validaciju forme (URL - https://github.com/cretueusebiu/vform) komanda 'npm i axios vform'
u app.js iz 'resources\assets\js' dodajemo - 
import { Form, HasError, AlertError } from 'vform'
window.Form = Form;
Vue.component(HasError.name, HasError)
Vue.component(AlertError.name, AlertError)
ovaj je dodao ove kolone u migraciju za 'users' tabelu
$table->string('type')->default('user');
$table->mediumText('bio')->nullable();
$table->string('photo')->default('profile.png');
ovo dodajemo u export default na dnu Users.vue komponente - 
data(){
  return{
    form: new Form({
      name: '',
      email: '',
      password: '',
      type: '',
      bio: '',
      photo: '',
    })
  }
},
i onda smo u modalu u Users.vue komponenti napravili formu koja je bajnodvana za ovaj objekat i koja ce sluziti za kreiranje novog usera 

//--------------------------------------------------------------------------------------------------------------------------------------------------------

Lekcija - https://www.youtube.com/watch?v=b6ak-VXIGqY&list=PLB4AdipoHpxaHDLIaMdtro1eXnQtl_UvE&index=12
API resorce contrtoller
Formu koju smo napravili u modal windows-u u komponenti User.vue uokvirujemo <form> tagom koji na sabmit poziva funkciju crerateUser i preventuje ssabmit
<form @submit.prevent="createUser"> 
U export default u User.vue komponenti pravimop sekciju methods i u njoj metod createUser() koji ce hendlovati sabmit forme
u njemu pise samo da gadja POST rutu '/api/user' - this.form.post('/api/user'); tj store() metod API UserControllera koji cemo napraviti
Komandom 'php artisan make:controller API/UserController --api' pravimo api UserController u 'app\Http\Controllers\API' razlikuje se od obicnog kontrolera-
-jer nema metode za ucitavanje vjuova kao edit() ili create() 
U api.php iz foldera 'routes' pravimo resorce rute za API UserController iz 'app\Http\Controllers\API' 
Route::apiResources(['user' => 'API\UserController']);
sad aposle konmande 'php artisan route:list' prikazuje 'api/user' rute

//--------------------------------------------------------------------------------------------------------------------------------------------------------

Lekcija - https://www.youtube.com/watch?v=lpcNVJEB2G4&list=PLB4AdipoHpxaHDLIaMdtro1eXnQtl_UvE&index=13
uradios am komandu 'php artisan migrate:refresh' posto je ovaj menjao migraciju za 'users' tabelu i u modelu User.php dodajem u fillable array nova polja
protected $fillable = [
  'name', 'email', 'password', 'bio', 'photo', 'type'
];
i dodajem u store() metod API UserCOntrollera da upise novog usera u bazu

//--------------------------------------------------------------------------------------------------------------------------------------------------------

Lekcija - https://www.youtube.com/watch?v=352_GfBJA1U&list=PLB4AdipoHpxaHDLIaMdtro1eXnQtl_UvE&index=14
Validacija requesta za dodavanje novog usera u API UserController-u
$this->validate($request, [
    'name' => 'required|string|max:191',
    'email' => 'required|string|email|max:191|unique:users',
    'password' => 'required|string|min:6',
]);

//--------------------------------------------------------------------------------------------------------------------------------------------------------

Lekcija - https://www.youtube.com/watch?v=bUXhGw4aQtA&list=PLB4AdipoHpxaHDLIaMdtro1eXnQtl_UvE&index=15
U API UserController dodajemo u index() metod return User::latest()->paginate(10); da vadi po 10 najnovijih usera, a u Users.vue komponenti dodajemo metod
-loadUsers(){
    axios.get("api/user").then(({data}) => (this.users = data.data));
},
koji poziva index() iz API UserController-a i dodajemo da u tabeli u Users.vue prikaze usere koje vrati kontroler, koristimo v-for petlju
<tr v-for="user in users" :key="user.id">
          <td>{{user.id}}</td>
              <td>{{user.name}}</td>
              <td>{{user.email}}</td>
              <td>{{user.type}}</td>
              <td>{{user.created_at}}</td>
              <td>
              <a href="#">
                  <i class="fa fa-edit blue"></i>
              </a>
              /
              <a href="#">
                  <i class="fa fa-trash red"></i>
              </a>
          </td>
</tr>

//--------------------------------------------------------------------------------------------------------------------------------------------------------

Lekcija - https://www.youtube.com/watch?v=bV9YsIi-FUU&list=PLB4AdipoHpxaHDLIaMdtro1eXnQtl_UvE&index=16
U app.js iz 'resources\assets\js' pravimo filter upText koji kad se pozove u komponenti prebacuje prvi karakter stringa u upper case i onda ga pozivamo kad
- prikazujemo type kolonu u tabeli u komponenti Users.vue - <td>{{user.type | upText}}</td>
Pravimo filter koji ce formatirati datum iz created_at kolone, prvo instaliramo moment komandom 'npm install moment --save' i onda ga importujemo u app.js-
-iz 'resources\assets\js' import moment from 'moment'; i pravimo filter koji formatira created_at kolonu 'users' tabele -
Vue.filter('myDate', function(created){
    return moment(created).format('MMMM Do YYYY');
});
i onda u tabeli u komponenti Users.vue koristimo filter u <td> gde prikazujemo created_at kolonu <td>{{user.created_at | myDate}}</td>

//--------------------------------------------------------------------------------------------------------------------------------------------------------

Lekcija - https://www.youtube.com/watch?v=-Hl4A5cMH_I&list=PLB4AdipoHpxaHDLIaMdtro1eXnQtl_UvE&index=17
pravljenje vue progress bara
komandom 'npm install vue-progressbar --save' instaliramo paket, onda ga importujemo u app.js iz 'resources\assets\js'
import VueProgressBar from 'vue-progressbar';
Vue.use(VueProgressBar, {
    color: 'rgb(143, 255, 199)',
    failedColor: 'red',
    height: '3px'
});
zatim u layoutu master.blade.php ispod taga <router-view></router-view> pisemo <vue-progress-bar></vue-progress-bar> , na kraju menjamo u methods sekciji -
- u Users.vue komponenti metod createUser() tako da pre nego posalje POST request pokrene progress bar i kad dobije response da ga zavrsi 
createUser(){
    this.$Progress.start();
    this.form.post('/api/user');
    this.$Progress.finish();
}

//--------------------------------------------------------------------------------------------------------------------------------------------------------

Lekcija - https://www.youtube.com/watch?v=qJt6EfbQu6E&list=PLB4AdipoHpxaHDLIaMdtro1eXnQtl_UvE&index=18
menjamo kreiranje usera tako da kad kreira usera zatvori modal window sa formom za kreiranje usera i prkaze stilizovani alert sa Success porukom, prvo -
- intaliramo paket sweetalert koji prikazuje stilizovane alerte komnadom 'npm install sweetalert2 --save' (docs: https://sweetalert2.github.io/#download)
U app.js iz 'resources\assets\js' importujemo paket
import swal from 'sweetalert2';
window.swal = swal;
skidamo primer sa url - https://sweetalert2.github.io/#examples za toast alert i ubacujemo u app.js
const Toast = Swal.mixin({
    toast: true,
    position: 'top-end',
    showConfirmButton: false,
    timer: 3000
});
i dodajemo u createUser() metod u Users.vue komponenti pre okidanje finisha za progressbar ovo
$('#addNew').modal('hide'); //ovo je da zatvori modal window sa formom
toast.fire({
    type: 'success',
    title: 'User created successfully'
});

//--------------------------------------------------------------------------------------------------------------------------------------------------------

Lekcija - https://www.youtube.com/watch?v=AqO_afAc1kQ&list=PLB4AdipoHpxaHDLIaMdtro1eXnQtl_UvE&index=19




















